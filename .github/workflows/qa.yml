name: Quality Assurance

on:
  push:
    branches: [main, feat/*]
  pull_request:
    branches: [main]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality and Linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Lua 5.2
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.2"

      - name: Install LuaRocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install luacheck
        run: luarocks install luacheck

      - name: Install linting tools
        run: |
          npm install -g jsonlint markdownlint-cli
          pip3 install jsonschema

      - name: Lint Lua files
        run: |
          echo "üîç Linting Lua files..."
          luacheck *.lua tests/test_*.lua --globals data util defines game script require _G type pairs ipairs table string debug os io math loadfile --allow-defined-top --max-line-length 150
          echo "‚úÖ Lua linting completed (excluding external luaunit.lua)"

      - name: Check documentation files exist
        run: |
          echo "üìö Checking documentation..."
          test -f "docs/list-module.md" && echo "‚úÖ List module docs found"
          test -f "docs/recipe-module.md" && echo "‚úÖ Recipe module docs found"
          test -f "docs/technology-module.md" && echo "‚úÖ Technology module docs found"
          test -f "README.md" && echo "‚úÖ README found"
          test -f "changelog.txt" && echo "‚úÖ Changelog found"
          echo "‚úÖ Documentation check completed"

      - name: Validate JSON files
        run: |
          echo "üîß Validating JSON files..."

          # Function to validate JSON files
          validate_json() {
            if [ -f "$1" ]; then
              if python3 -m json.tool "$1" > /dev/null 2>&1; then
                echo "‚úÖ $1 is valid"
              else
                echo "‚ùå $1 is invalid"
                return 1
              fi
            else
              echo "‚ö†Ô∏è $1 not found (optional)"
            fi
          }

          # Validate all JSON files
          validate_json "info.json"
          validate_json ".vscode/settings.json"
          validate_json ".vscode/tasks.json"
          validate_json ".vscode/launch.json"
          validate_json ".markdownlint.json"

          # Find and validate any other JSON files
          echo "üîç Checking for additional JSON files..."
          find . -name "*.json" -not -path "./.git/*" | while read -r file; do
            validate_json "$file"
          done

          echo "‚úÖ JSON validation completed"

      - name: Lint JSON files with jsonlint
        run: |
          echo "üîç Linting JSON files with jsonlint..."

          # Function to lint JSON files with jsonlint
          lint_json() {
            if [ -f "$1" ]; then
              echo "Linting $1..."
              if jsonlint "$1" > /dev/null 2>&1; then
                echo "‚úÖ $1 passed jsonlint"
              else
                echo "‚ùå $1 failed jsonlint:"
                jsonlint "$1"
                return 1
              fi
            fi
          }

          # Lint specific JSON files
          lint_json "info.json"
          lint_json ".vscode/settings.json"
          lint_json ".vscode/tasks.json"
          lint_json ".vscode/launch.json"
          lint_json ".markdownlint.json"

          echo "‚úÖ JSON linting completed"

      - name: Lint Markdown files
        run: |
          echo "üìù Linting Markdown files..."

          # Use markdownlint with the project configuration
          if [ -f ".markdownlint.json" ]; then
            echo "Using .markdownlint.json configuration"
            markdownlint --config .markdownlint.json "**/*.md" || {
              echo "‚ùå Markdown linting failed"
              echo "üí° Run 'markdownlint --config .markdownlint.json --fix **/*.md' to auto-fix issues"
              exit 1
            }
          else
            echo "No .markdownlint.json found, using default rules"
            markdownlint "**/*.md" || {
              echo "‚ùå Markdown linting failed"
              exit 1
            }
          fi

          echo "‚úÖ Markdown linting completed"

  test-matrix:
    runs-on: ubuntu-latest
    name: Test Matrix
    strategy:
      matrix:
        lua-version: ["5.2", "5.4"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Lua ${{ matrix.lua-version }}
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: ${{ matrix.lua-version }}

      - name: Run All Tests
        run: |
          echo "üß™ Running tests with Lua ${{ matrix.lua-version }}"
          cd tests

          echo "Testing List Module..."
          lua test_list.lua

          echo "Testing Recipe Module..."
          lua test_recipe.lua

          echo "Testing Technology Module..."
          lua test_technology.lua

          echo "‚úÖ All tests passed with Lua ${{ matrix.lua-version }}!"
