name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    name: Create Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Lua 5.2
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.2"

      - name: Run Tests Before Release
        run: |
          echo "🧪 Running full test suite before release..."
          cd tests
          lua test_list.lua
          lua test_recipe.lua
          lua test_technology.lua
          echo "✅ All tests passed!"

      - name: Validate Version Consistency
        run: |
          echo "🔍 Checking version consistency..."

          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Tag version: $VERSION"

          # Check info.json version
          INFO_VERSION=$(python3 -c "import json; print(json.load(open('info.json'))['version'])")
          echo "info.json version: $INFO_VERSION"

          if [ "$VERSION" != "$INFO_VERSION" ]; then
            echo "❌ Version mismatch between tag ($VERSION) and info.json ($INFO_VERSION)"
            exit 1
          fi

          echo "✅ Version consistency check passed"

      - name: Create Factorio Mod Package
        run: |
          echo "📦 Creating mod package..."

          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          MOD_DIR="khaoslib_$VERSION"

          # Create mod directory structure with proper versioned name
          mkdir -p "$MOD_DIR"

          # Copy mod files (exclude development files)
          cp *.lua "$MOD_DIR/" 2>/dev/null || true
          cp info.json "$MOD_DIR/"
          cp changelog.txt "$MOD_DIR/"
          cp LICENSE "$MOD_DIR/"
          cp README.md "$MOD_DIR/"

          # Copy thumbnail if it exists
          if [ -f "thumbnail.png" ]; then
            cp thumbnail.png "$MOD_DIR/"
            echo "✅ Included thumbnail.png"
          fi

          # Copy docs directory if it exists
          if [ -d "docs" ]; then
            cp -r docs "$MOD_DIR/"
            echo "✅ Included docs directory"
          fi

          # Create versioned zip file
          ZIP_NAME="khaoslib_$VERSION.zip"
          zip -r "$ZIP_NAME" "$MOD_DIR/"

          echo "✅ Mod package created: $ZIP_NAME"

      - name: Verify Package Contents
        run: |
          echo "🔍 Verifying package contents..."

          VERSION=${GITHUB_REF#refs/tags/v}
          ZIP_NAME="khaoslib_$VERSION.zip"

          # List contents of the zip file
          echo "📁 Package contents:"
          unzip -l "$ZIP_NAME"

          # Verify essential files are present
          if unzip -l "$ZIP_NAME" | grep -q "info.json"; then
            echo "✅ info.json included"
          else
            echo "❌ info.json missing"
            exit 1
          fi

          if unzip -l "$ZIP_NAME" | grep -q "thumbnail.png"; then
            echo "✅ thumbnail.png included"
          else
            echo "⚠️  thumbnail.png not found (optional)"
          fi

          if unzip -l "$ZIP_NAME" | grep -q "docs/"; then
            echo "✅ docs directory included"
          else
            echo "⚠️  docs directory not found (optional)"
          fi

      - name: Extract Release Notes
        id: release_notes
        run: |
          echo "📝 Extracting release notes from changelog..."

          # Extract the latest version's changes from changelog.txt
          VERSION=${GITHUB_REF#refs/tags/v}

          # Extract base release notes and get line numbers
          awk "/Version: $VERSION/,/^---/" changelog.txt | \
            head -n -1 | tail -n +3 > raw_changelog.tmp

          # Find the starting line number of this version in the original file
          VERSION_LINE=$(grep -n "Version: $VERSION" changelog.txt | cut -d: -f1)
          START_LINE=$((VERSION_LINE + 2))  # Skip version line and date line

          echo "📋 Version starts at line $START_LINE in changelog.txt"

          # Process each line and add PR references using git blame
          line_num=$START_LINE
          > release_notes.md

          while IFS= read -r line; do
            if [[ $line == "  "[A-Z]*":" ]]; then
              # Category header
              category=$(echo "$line" | sed 's/^  \([A-Z][a-zA-Z]*\):$/### \1/')
              echo "$category" >> release_notes.md
            elif [[ $line == "    - "* ]]; then
              # Feature line - get PR reference from git blame
              feature_text="${line#    - }"

              # Use git blame to find the commit that last modified this line
              blame_info=$(git blame -L${line_num},${line_num} changelog.txt 2>/dev/null || echo "")

              if [ -n "$blame_info" ]; then
                # Extract commit hash from blame output
                commit_hash=$(echo "$blame_info" | awk '{print $1}' | sed 's/^\^//')

                # Get the commit message for this hash
                commit_msg=$(git log --format=%s -n 1 "$commit_hash" 2>/dev/null || echo "")

                # Extract PR number from commit message
                pr_ref=$(echo "$commit_msg" | grep -oE '\(#[0-9]+\)' | head -1)

                if [ -n "$pr_ref" ]; then
                  echo "- $feature_text $pr_ref" >> release_notes.md
                  echo "  📎 Line $line_num -> $pr_ref (commit: ${commit_hash:0:7})"
                else
                  echo "- $feature_text" >> release_notes.md
                fi
              else
                echo "- $feature_text" >> release_notes.md
              fi
            elif [[ -n "$line" ]]; then
              # Other non-empty lines
              echo "$line" >> release_notes.md
            else
              # Empty lines
              echo "" >> release_notes.md
            fi

            line_num=$((line_num + 1))
          done < raw_changelog.tmp

          # Clean up
          rm -f raw_changelog.tmp

          echo "✅ Release notes prepared with git blame PR references"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: khaoslib_*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
